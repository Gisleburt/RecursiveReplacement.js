"use strict";var RecursiveReplacement;!function(e){var t=function(){function e(){}return e.doestStringContainReplacements=function(e,t){if(void 0===t&&(t="{{ }}"),"string"!=typeof e)throw new Error("The first parameter of 'doestStringContainReplacements' must be a string");if("string"!=typeof t)throw new Error("The second parameter of 'doestStringContainReplacements' must be a string");var n=t.split(" ");if(2!=n.length)throw new Error("The second parameter of 'doestStringContainReplacements' must contain a single space");var r=new RegExp(n[0]+"((.(?!"+n[1]+"))+.)"+n[1],"g"),i=e.match(r);return!!i&&i.length>0},e.getReplacementsInString=function(e,t){if(void 0===t&&(t="{{ }}"),"string"!=typeof e)throw new Error("The first parameter of 'getReplacementsInString' must be a string");if("string"!=typeof t)throw new Error("The second parameter of 'getReplacementsInString' must be a string");var n=t.split(" ");if(2!=n.length)throw new Error("The second parameter of 'getReplacementsInString' must contain a single space");for(var r,i=new RegExp(n[0]+"((.(?!"+n[1]+"))+.)"+n[1],"g"),a=[];r=i.exec(e);)a.push(r[1].trim());return a},e.replaceInString=function(e,t,n){void 0===n&&(n="{{ }}")},e.getReplacementFromData=function(e,t){},e}();e.RecursiveReplacement=t}(RecursiveReplacement||(RecursiveReplacement={})),module.exports=RecursiveReplacement;
//# sourceMappingURL=recursive-replacement.js.map
